#!/usr/bin/env lua
-- make.lua
-- Copyrighted (C) 2025 EntropyCoset on BSD 2-clause licence, also released as Public Domain

local lfs = require("lfs")

local cfg_mode = arg[1] or "normal"
local cfg_chain = arg[2] or "default"

print("Mode of this script: " .. cfg_mode .. " ; Blockchain/genesis: " .. cfg_chain)

-- Special edit mode
if cfg_mode == "x" then
    local script = debug.getinfo(1).source:sub(2) -- get current script path
    os.execute("vim " .. script)
    print("After editing myself - exit")
    os.exit()
end

-- Compile showargs if not present
local function file_exists(path)
    local f = io.open(path, "r")
    if f then f:close() return true else return false end
end

local function is_executable(path)
    return os.execute('[ -x "' .. path .. '" ]') == 0
end

if not is_executable("./showargs") then
    if file_exists("./showargs.cpp") then
        local res = os.execute("g++ showargs.cpp -o showargs")
        if res ~= 0 then print("Cannot compile showargs") end
    end
end

-- good_rand() - safely generate random int in range
local function good_rand(max)
    local max_limit = 4294967296 - 2
    if max >= max_limit then
        io.stderr:write("ERROR: max value (" .. max .. ") exceeds 32bit limit (" .. max_limit .. ")\n")
        os.exit(1)
    end
    local handle = io.popen("od -An -N4 -tu4 < /dev/urandom")
    local rnd = tonumber(handle:read("*a"):match("%d+"))
    handle:close()
    return rnd % (max + 1)
end

print("Cleanup of old run data")
os.execute("rm -rf ./witness_node_data_dir/") -- No check, will continue on error

-- Generate random ports
local r1 = good_rand(970)
local port1 = r1 + 1025
local port2 = port1 + 1

print("port1=" .. port1 .. " port2=" .. port2)

-- Load secret
local home = os.getenv("HOME")
local privkey1_fullfn = home .. "/.devel/SECRET/pay2exchange/BTS5k46b9hXwYjLCZZy8usUGjtREeoQeEoLRUonJVkvp9GvVM3bx9.secret"
local privkey1_secret = ""

if not file_exists(privkey1_fullfn) then
    print("Cannot read secret file (" .. privkey1_fullfn .. "). Aborting.")
    os.exit(1)
else
    local file = io.open(privkey1_fullfn, "r")
    local line = file:read("*l")
    file:close()
    if not line:match("^[%w]+$") then
        print("The data read does not look correct. Aborting.")
        os.exit(1)
    else
        privkey1_secret = line
        print("Read secret key.")
    end
end

-- Determine genesis file
local genesis_map = {
    default = home .. "/chain-p2e/test-genesis-p2e1.json",
    p2e1 = home .. "/chain-p2e/test-genesis-p2e1.json",
    ec1  = home .. "/chain-p2e/test-genesis-ec1.json",
    bit  = home .. "/chain-p2e/bitshares1-mod.json"
}
local genesis = genesis_map[cfg_chain] or genesis_map["default"]

if not genesis_map[cfg_chain] then
    print("Unknown chain: " .. cfg_chain)
end

print("Genesis: " .. genesis)

-- Construct program arguments
local prog = "programs/witness_node/witness_node"
local args = {
    "--rpc-endpoint=0.0.0.0:" .. port1,
    "--p2p-endpoint=0.0.0.0:" .. port2,
    '--witness-id="1.6.1"',
    '--private-key=["BTS5k46b9hXwYjLCZZy8usUGjtREeoQeEoLRUonJVkvp9GvVM3bx9", "' .. privkey1_secret .. '"]',
    "--enable-stale-production",
    "--genesis-json=" .. genesis
}

-- Check if witness_node is executable
local function file_is_executable(path)
    return os.execute('[ -x "' .. path .. '" ]') == 0
end

if not file_is_executable(prog) then
    io.stderr:write("ERROR: Required program '" .. prog .. "' not found or not executable.\n")
    os.exit(1)
end

print("Arguments for program")
for _, arg in ipairs(args) do
    print("  " .. arg)
end

-- Showargs
if is_executable("./showargs") then
    print("Arguments for program, as printed by a dummy program:")
    local cmd = "./showargs " .. table.concat(args, " ")
    os.execute(cmd)
end

-- Run depending on mode
local run_modes = {
    n = function()
        os.execute(prog .. " " .. table.concat(args, " "))
    end,
    normal = function()
        os.execute(prog .. " " .. table.concat(args, " "))
    end,
    gdbm = function()
        os.execute('gdb -ex "source mycatch.gdb" --args ' .. prog .. " " .. table.concat(args, " "))
    end,
    gdbt = function()
        os.execute('gdb -ex "catch throw" --args ' .. prog .. " " .. table.concat(args, " "))
    end,
    gdb0 = function()
        os.execute("gdb --args " .. prog .. " " .. table.concat(args, " "))
    end,
    gdbx = function()
        os.execute('gdb -ex "set can-use-hw-watchpoints 0" -ex "source devel/gdb/poolwatch.gdb" -ex "break _xxx_point1" --args ' .. prog .. " " .. table.concat(args, " "))
    end
}

if run_modes[cfg_mode] then
    run_modes[cfg_mode]()
else
    print("Unknown mode: " .. cfg_mode)
end

